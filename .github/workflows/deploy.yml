name: Build and Push Docker Image to ECR and EKS
on:
  push:
    branches:
      - main

jobs:
  # build-push-image:
  #   runs-on: ubuntu-latest
 
  #   env:
  #     REPOSITORY_URI: ${{ secrets.REPOSITORY_URI }}
  #     IMAGE_TAG: ${{ github.sha }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Log in to Amazon ECR
  #       uses: jwalton/gh-ecr-login@v3.0.1
  #       with:
  #         region: ${{ secrets.AWS_REGION }}
  #         access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
  #         secret-access-key: ${{ secrets.AWS_SECRET }}

  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ${{ secrets.REPOSITORY_URI }}:${{ github.sha }}
  #           ${{ secrets.REPOSITORY_URI }}:latest

  # deploy-sqlScript-rds:
  #   runs-on: ubuntu-latest
  #   needs: build-push-image
  #   steps:
  #     - name: Install MySQL client
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y mysql-client

      # - name: Deploy SQL script to RDS
      #   env:
      #     RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
      #     RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
      #     RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      #     DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      #   run: |
      #     mysql -h "$RDS_ENDPOINT" -u "$RDS_USERNAME" -p"$RDS_PASSWORD" "$DATABASE_NAME" < ./assets/db-load-script.sql



  deploy-to-eks:
    runs-on: ubuntu-latest
    # needs: deploy-sqlScript-rds
    env:
      RELEASE_NAME: preprod
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{secrets.CLUSTER_NAME}} --region ${{ secrets.AWS_REGION }}
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4.0.0
        id: install

      - name: Create or Update Database Secrets
        run: |
          if ! kubectl get namespace php >/dev/null 2>&1; then
            kubectl create namespace php
          fi
          kubectl apply -f ./kube-manifests
      

            